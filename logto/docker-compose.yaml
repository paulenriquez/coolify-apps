services:
  logto:
    image: svhd/logto:1.28
    container_name: logto
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "3001"
      - "3002" # Admin Console
    environment:
      - SERVICE_FQDN_LOGTO
      - TRUST_PROXY_HEADER=1
      - DB_URL=postgres://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-logto}
      - ENDPOINT=${LOGTO_ENDPOINT}
      - ADMIN_ENDPOINT=${LOGTO_ADMIN_ENDPOINT}
    entrypoint:
      - sh
      - "-c"
      - |
        echo "------------------------------------------------------------"

        echo "Pinging coolify-proxy..."
        until ping -c1 coolify-proxy &>/dev/null; do
          echo "coolify-proxy is not reachable. Trying again in 5s..."
          echo ""
          sleep 5
          echo "Pinging coolify-proxy..."
        done
        echo ""

        # Extract coolify-proxy IP from ping command
        COOLIFY_PROXY_IP=$(ping -c1 coolify-proxy | head -n1 | awk '{print $3}' | tr -d '():')
        echo "coolify-proxy IP: $${COOLIFY_PROXY_IP}"

        # Remove protocol prefix ('http://' or 'https://')
        LOGTO_ENDPOINT="${LOGTO_ENDPOINT}"
        LOGTO_ADMIN_ENDPOINT="${LOGTO_ADMIN_ENDPOINT}"

        ENDPOINT_NOPROTOCOL="$${LOGTO_ENDPOINT#http://}"
        ENDPOINT_NOPROTOCOL="$${LOGTO_ENDPOINT#https://}"

        ADMIN_ENDPOINT_NOPROTOCOL="$${LOGTO_ADMIN_ENDPOINT#http://}"
        ADMIN_ENDPOINT_NOPROTOCOL="$${LOGTO_ADMIN_ENDPOINT#https://}"

        # Add details to /etc/hosts
        echo "Appending to /etc/hosts:"

        echo "  $${COOLIFY_PROXY_IP} $${ENDPOINT_NOPROTOCOL}"
        echo "$${COOLIFY_PROXY_IP} $${ENDPOINT_NOPROTOCOL}" >> /etc/hosts

        echo "  $${COOLIFY_PROXY_IP} $${ADMIN_ENDPOINT_NOPROTOCOL}"
        echo "$${COOLIFY_PROXY_IP} $${ADMIN_ENDPOINT_NOPROTOCOL}" >> /etc/hosts

        echo "------------------------------------------------------------"

        # Run the logto entrypoint command
        npm run cli db seed -- --swe && npm start
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 20s
      retries: 10

  postgres:
    image: postgres:17-alpine
    user: postgres
    environment:
      POSTGRES_USER: ${SERVICE_USER_POSTGRES}
      POSTGRES_PASSWORD: ${SERVICE_PASSWORD_POSTGRES}
      POSTGRES_DB: ${POSTGRES_DB:-logto}
    volumes:
      - logto-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "$SERVICE_USER_POSTGRES",
          "-d",
          "$POSTGRES_DB",
        ]
      interval: 5s
      timeout: 20s
      retries: 10
